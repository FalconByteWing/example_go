// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type PayoutStatus string

const (
	PayoutStatusPending    PayoutStatus = "pending"
	PayoutStatusProcessing PayoutStatus = "processing"
	PayoutStatusCompleted  PayoutStatus = "completed"
	PayoutStatusFailed     PayoutStatus = "failed"
)

func (e *PayoutStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PayoutStatus(s)
	case string:
		*e = PayoutStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PayoutStatus: %T", src)
	}
	return nil
}

type NullPayoutStatus struct {
	PayoutStatus PayoutStatus `json:"payout_status"`
	Valid        bool         `json:"valid"` // Valid is true if PayoutStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPayoutStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PayoutStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PayoutStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPayoutStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PayoutStatus), nil
}

type MerchantBalance struct {
	ID         int64              `json:"id"`
	MerchantID uuid.UUID          `json:"merchant_id"`
	Balance    pgtype.Numeric     `json:"balance"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type Payout struct {
	ID         int64              `json:"id"`
	OrderID    string             `json:"order_id"`
	BankName   string             `json:"bank_name"`
	UserID     string             `json:"user_id"`
	Amount     pgtype.Numeric     `json:"amount"`
	Email      string             `json:"email"`
	Phone      string             `json:"phone"`
	IfscCode   string             `json:"ifsc_code"`
	AccountNo  string             `json:"account_no"`
	Name       string             `json:"name"`
	NotifyUrl  string             `json:"notify_url"`
	Status     PayoutStatus       `json:"status"`
	MerchantID uuid.UUID          `json:"merchant_id"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}
